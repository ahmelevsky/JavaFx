package rf.ui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import rf.JsonParser;
import rf.Main;
import rf.ShutterImage;
import rf.ShutterProvider;

public class MainController implements Initializable {

	public Main app;
	public ShutterProvider provider;
	
	@FXML
	private Button getDataBtn;
	
	@FXML
	private TextField sessionIdText;
	
	@FXML
	private TextArea rejectedListText;
	
	@FXML
	private Label statusLabel;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
	}
	
	  @FXML 
	  private void getRejected() {
		  List<ShutterImage> rejectsImages = new ArrayList<ShutterImage>();
		  Thread t1 = new Thread(new Runnable() {
			    @Override
			    public void run() {
			    	disableControl();
			    	String sessionId = sessionIdText.getText().trim();
				     if (sessionId.isEmpty()) {
				    	 rejectedListText.setText("Пустой sessionId");
				    	 return;
				     }
				    ShutterProvider provider = new ShutterProvider(sessionId);
				    if (!provider.isConnection()) {
				    	 rejectedListText.setText("Ошибка авторизации");
				    	 return;
				     }
				    String rejectesString =  provider.getRejects();
				    writeToFile("D:\\Shutter.html", rejectesString);
				    List<ShutterImage> list = JsonParser.parseImagesData(rejectesString);
				    List<String> printList = new ArrayList<String>();
				    for (ShutterImage im:list)
				    	printList.add(im.media_id  + im.uploaded_date + Arrays.toString(im.reasons.toArray()));
				    printRejected(printList);
				    enableControl();
			    }
			});  
			t1.start();
	    
	  }
	 
	  private void writeToFile(String fileName, String data) {
		 File file = new File(fileName);
		 if (file.exists()) file.delete();
		 try {
			file.createNewFile();
		} catch (IOException e1) {
		}
		  try {
			PrintWriter out = new PrintWriter(fileName);
			out.write(data);
			out.close();
		} catch (FileNotFoundException e) {
		}
	  }
	
	private void printRejected(List<String> list) {
		rejectedListText.clear();
		list.forEach(item->rejectedListText.appendText(item + "\n"));
	}
	
	private void setStatus(String string) {
		statusLabel.setText("Status: " + string);
	}
	
	
	private void disableControl() {
		Platform.runLater(new Runnable() {
            public void run() {
            	 getDataBtn.setDisable(true);
            }
		 });
	}
	
private void enableControl() {
	Platform.runLater(new Runnable() {
        public void run() {
        	 getDataBtn.setDisable(false);
        }
	 });
	}
	
	private void showAlert(String text) {
		Platform.runLater(new Runnable() {
            public void run() {
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("ERROR");
		alert.setHeaderText("ERROR");
		alert.setContentText(text);
		alert.showAndWait();
            }
		 });
	}
}
