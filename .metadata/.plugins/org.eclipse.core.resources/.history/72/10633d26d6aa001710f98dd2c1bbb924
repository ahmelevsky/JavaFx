import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class Main {

	
	public static void main(String[] args) throws IOException{
		File folder = new File(".");
		List<File> files = new ArrayList<>(Arrays.asList(folder.listFiles(new FileFilter(){
			@Override
			public boolean accept(File arg0) {
				// TODO Auto-generated method stub
				return !arg0.getName().endsWith(".jar");
			}
		})));
		
		System.out.println("ѕапка: " + folder.getName() + ", файлов: " + files.size());
		boolean failure = false;
		int parts = 0;
		do {
			if (failure)
				System.out.println("¬веденное значение не корректно, введите положительное целое числовое значение и нажмите ENTER");
			System.out.print("¬ведите сколько частей поделить:");
			String input = System.console().readLine();
			if (tryParseInt(input) && Integer.parseInt(input)>0)
				parts = Integer.parseInt(input);
		}
		while (parts == 0);
		
		List<File> destFolders = new ArrayList<File>();
		for (int i=1; i<=parts;i++){
			File df = new File(folder.getAbsolutePath() + File.separator + i);
		    df.mkdir();
		    destFolders.add(df);
		}
		for (int i=1; i<=files.length; i++){
			
			Files.move(Paths.get(URI.create(files[i-1].getAbsolutePath())), Paths.get(URI.create(destFolders.get(files.length%i-1).getAbsolutePath() + File.separator + files[i-1].getName())));
		}
	}
	
	static boolean tryParseInt(String value) {  
	     try {  
	         Integer.parseInt(value);  
	         return true;  
	      } catch (NumberFormatException e) {  
	         return false;  
	      }  
	}
}
